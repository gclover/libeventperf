


(1) event_base

// create simple event
struct event_base* event_base_new(void); // <event2/event.h>

// create complex event
struct event_config* event_config_new(void);
void event_config_free(struct event_config* cfg);
struct event_base* event_base_new_with_config(const struct event_config* cfg);

int event_config_avoid_method(struct event_config* cfg, const char* method);
enum event_method_feature {}
int event_config_require_feature(struct event_config* cfg, enum event_method_feature feature);
int event_config_set_flag(struct event_config* cfg, enum event_base_confgi_flag flag);

int event_config_set_num_cpus_hint(struct event_config* cfg, int cpus);

void event_base_free(struct event_base* base);

int event_base_priority_init(struct event_base* base, int n_priorities);

EVLOOP_ONCE | EVLOOP_NONBLOCK
int event_base_loop(struct event_base* base, int flags);
int event_base_dsipatch(struct event_base* base); // wait loopexit, or loopbreak
int event_base_loopexit(struct event_base* base, const struct timeval* tv);
int event_base_loopbreak(struct event_base* base);

int event_base_got_exit(struct event_base* base);
int event_base_got_break(struct event_base* base);

int event_bae_gettimeofday_cached(struct event_base* base, struct timeval* tv_out);

void event_base_dump_events(struct event_base* base, FILE* f);

EV_TIMEOUT
EV_READ
EV_WRITE
EV_SIGNAL
EV_PERSIST
EV_ET

typedef void (*event_callback_fn)(evutil_socket_t, short, void*);

struct event* event_new(struct event_base* base, evutil_socket_t fd, 
            short what, event_callback_fn cb, void* arg);
void event_free(struct event* event);

